{"version":3,"sources":["redux/contacts/contacts-selectors.js","conponents/ContactForm.js","redux/contacts/contacts-operations.js","conponents/Filter.js","conponents/ContactList.js","views/ContactsView.js"],"names":["getItems","state","contacts","items","getFilter","filter","visibleContacts","createSelector","contact","name","toLowerCase","includes","ContactForm","dispatch","useDispatch","useState","Setname","number","Setnumber","useSelector","contactSelectors","handleChangeName","useCallback","e","currentTarget","value","handleChangeNumber","handleSubmit","preventDefault","item","id","uuidv4","find","toUpperCase","alert","actions","axios","post","then","data","catch","error","message","Form","onSubmit","autoComplete","Group","Label","Control","type","onChange","Button","variant","Filter","textFilter","controlId","ContactList","ListGroup","map","Item","size","onClick","delete","style","marginLeft","ContactsView","useEffect","get","marginTop"],"mappings":"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","file":"static/js/6.33167bb5.chunk.js","sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getItems = state => state.contacts.items;\r\nconst getFilter = state => state.contacts.filter;\r\n\r\nconst visibleContacts = createSelector(\r\n  [getFilter, getItems],\r\n  (filter, contacts) => {\r\n    return contacts.filter(contact =>\r\n      contact.name.toLowerCase().includes(filter.toLowerCase()),\r\n    );\r\n  },\r\n);\r\n\r\nexport default {\r\n  getItems,\r\n  getFilter,\r\n  visibleContacts,\r\n};\r\n","//npm\r\nimport React, { useState, useCallback } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\n//module\r\nimport { addContact } from '../redux/contacts/contacts-operations';\r\nimport contactSelectors from '../redux/contacts/contacts-selectors';\r\n\r\nexport default function ContactForm() {\r\n  const dispatch = useDispatch();\r\n\r\n  const [name, Setname] = useState('');\r\n  const [number, Setnumber] = useState('');\r\n\r\n  const items = useSelector(contactSelectors.getItems);\r\n\r\n  const handleChangeName = useCallback(e => {\r\n    Setname(e.currentTarget.value);\r\n  }, []);\r\n\r\n  const handleChangeNumber = useCallback(e => {\r\n    Setnumber(e.currentTarget.value);\r\n  }, []);\r\n\r\n  const handleSubmit = useCallback(\r\n    e => {\r\n      e.preventDefault();\r\n      const contact = {\r\n        id: uuidv4(),\r\n        name,\r\n        number,\r\n      };\r\n      if (items.find(item => item.name.toUpperCase() === name.toUpperCase())) {\r\n        alert(name + ' is already in contacts');\r\n      } else {\r\n        dispatch(addContact(contact));\r\n        Setname('');\r\n        Setnumber('');\r\n      }\r\n    },\r\n    [dispatch, name, number, items],\r\n  );\r\n\r\n  return (\r\n    <Form onSubmit={handleSubmit} autoComplete=\"off\">\r\n      <Form.Group>\r\n        <Form.Label>Имя</Form.Label>\r\n        <Form.Control\r\n          type=\"text\"\r\n          name=\"name\"\r\n          value={name}\r\n          onChange={handleChangeName}\r\n        />\r\n      </Form.Group>\r\n\r\n      <Form.Group>\r\n        <Form.Label>Номер</Form.Label>\r\n        <Form.Control\r\n          type=\"text\"\r\n          name=\"number\"\r\n          value={number}\r\n          onChange={handleChangeNumber}\r\n        />\r\n      </Form.Group>\r\n      <Button variant=\"outline-primary\" type=\"submit\">\r\n        Добавить контакт\r\n      </Button>\r\n    </Form>\r\n  );\r\n}\r\n","import axios from 'axios';\r\nimport * as actions from './contacts-actions';\r\n\r\nexport const fetchContact = () => dispatch => {\r\n  dispatch(actions.fetchContactRequest());\r\n  axios\r\n    .get('/contacts')\r\n    .then(({ data }) => dispatch(actions.fetchContactSuccess(data)))\r\n    .catch(error => dispatch(actions.fetchContactError(error.message)));\r\n};\r\n\r\nexport const addContact = item => dispatch => {\r\n  dispatch(actions.addContactRequest());\r\n  axios\r\n    .post('/contacts', item)\r\n    .then(({ data }) => dispatch(actions.addContactSuccess(data)))\r\n    .catch(error => dispatch(actions.addContactError(error.message)));\r\n};\r\n\r\nexport const delContact = id => dispatch => {\r\n  dispatch(actions.delContactRequest());\r\n  axios\r\n    .delete(`/contacts/${id}`)\r\n    .then(() => dispatch(actions.delContactSuccess(id)))\r\n    .catch(error => dispatch(actions.delContactError(error.message)));\r\n};\r\n","//npm\r\nimport React, { useCallback } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Form from 'react-bootstrap/Form';\r\n//module\r\nimport * as actions from '../redux/contacts/contacts-actions';\r\nimport contactSelectors from '../redux/contacts/contacts-selectors';\r\n\r\nexport default function Filter() {\r\n  const dispatch = useDispatch();\r\n  const textFilter = useSelector(contactSelectors.getFilter);\r\n\r\n  const onChange = useCallback(\r\n    e => {\r\n      dispatch(actions.filterContact(e.currentTarget.value));\r\n    },\r\n    [dispatch],\r\n  );\r\n\r\n  return (\r\n    <Form.Group controlId=\"exampleForm.ControlInput1\">\r\n      <Form.Label>Найти контакт по имени</Form.Label>\r\n      <Form.Control\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        value={textFilter}\r\n        onChange={onChange}\r\n      />\r\n    </Form.Group>\r\n  );\r\n}\r\n","//npm\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport Button from 'react-bootstrap/Button';\r\n//module\r\nimport * as actions from '../redux/contacts/contacts-operations';\r\nimport contactSelectors from '../redux/contacts/contacts-selectors';\r\n\r\nexport default function ContactList() {\r\n  const dispatch = useDispatch();\r\n  const contacts = useSelector(contactSelectors.visibleContacts);\r\n\r\n  return (\r\n    <ListGroup>\r\n      {contacts.map(({ id, name, number }) => (\r\n        <ListGroup.Item key={id}>\r\n          {name}: {number}\r\n          <Button\r\n            variant=\"outline-primary\"\r\n            type=\"button\"\r\n            size=\"sm\"\r\n            onClick={() => dispatch(actions.delContact(id))}\r\n            style={{ marginLeft: '20px' }}\r\n          >\r\n            Delete\r\n          </Button>\r\n        </ListGroup.Item>\r\n      ))}\r\n    </ListGroup>\r\n  );\r\n}\r\n","//npm\r\nimport React, { useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n//module\r\nimport ContactForm from '../conponents/ContactForm';\r\nimport Filter from '../conponents/Filter';\r\nimport ContactList from '../conponents/ContactList';\r\nimport { fetchContact } from '../redux/contacts/contacts-operations';\r\n\r\nexport default function ContactsView() {\r\n  const dispatch = useDispatch();\r\n  useEffect(() => dispatch(fetchContact()), [dispatch]);\r\n  return (\r\n    <div>\r\n      <h3>Страница контактов</h3>\r\n      <ContactForm />\r\n      <hr />\r\n      <h3 style={{ marginTop: '20px' }}>Контакты</h3>\r\n      <Filter />\r\n      <ContactList />\r\n    </div>\r\n  );\r\n}\r\n"],"sourceRoot":""}